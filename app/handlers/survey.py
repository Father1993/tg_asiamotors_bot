from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import re
from datetime import datetime

from app.config import KeyboardButtons as kb, ADMIN_IDS
from app.FSM.survey import SurveyStates
from app.keyboards import get_main_keyboard
logger = logging.getLogger(__name__)

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞
budget_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ 2 –º–ª–Ω ‚ÇΩ"), KeyboardButton(text="2-3 –º–ª–Ω ‚ÇΩ")],
        [KeyboardButton(text="3-4 –º–ª–Ω ‚ÇΩ"), KeyboardButton(text="4-5 –º–ª–Ω ‚ÇΩ")],
        [KeyboardButton(text="–ë–æ–ª–µ–µ 5 –º–ª–Ω ‚ÇΩ")]
    ],
    resize_keyboard=True
)

timeframe_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü")],
        [KeyboardButton(text="–í —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤")],
        [KeyboardButton(text="–í —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤")],
        [KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å")]
    ],
    resize_keyboard=True
)

features_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç"), KeyboardButton(text="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")],
        [KeyboardButton(text="–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å"), KeyboardButton(text="–ü—Ä–µ—Å—Ç–∏–∂")],
        [KeyboardButton(text="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å"), KeyboardButton(text="–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å")]
    ],
    resize_keyboard=True
)

purpose_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–ª—è –≥–æ—Ä–æ–¥–∞"), KeyboardButton(text="–î–ª—è —Å–µ–º—å–∏")],
        [KeyboardButton(text="–î–ª—è –±–∏–∑–Ω–µ—Å–∞"), KeyboardButton(text="–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")],
        [KeyboardButton(text="–ö–∞–∫ –≤—Ç–æ—Ä–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å")]
    ],
    resize_keyboard=True
)

concerns_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—á–µ—Å—Ç–≤–æ —Å–±–æ—Ä–∫–∏"), KeyboardButton(text="–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å")],
        [KeyboardButton(text="–ù–∞–ª–∏—á–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π"), KeyboardButton(text="–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")],
        [KeyboardButton(text="–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"), KeyboardButton(text="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")],
        [KeyboardButton(text="–ù–µ—Ç —Å–æ–º–Ω–µ–Ω–∏–π")]
    ],
    resize_keyboard=True
)

contact_time_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£—Ç—Ä–æ (9:00-12:00)")],
        [KeyboardButton(text="–î–µ–Ω—å (12:00-17:00)")],
        [KeyboardButton(text="–í–µ—á–µ—Ä (17:00-20:00)")]
    ],
    resize_keyboard=True
)

@router.message(F.text == kb.SURVEY)
async def start_survey(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
    await state.set_state(SurveyStates.WAITING_NAME)
    await message.answer(
        "üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–ø—Ä–æ—Å!\n\n"
        "–ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∫–∏–¥–∫—É 10 000‚ÇΩ "
        "–Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n"
        "üë§ –ö–∞–∫ –º—ã –º–æ–∂–µ–º –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

@router.message(SurveyStates.WAITING_NAME)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(name=message.text)
    await state.set_state(SurveyStates.WAITING_PHONE)
    await message.answer(
        "üì± –°–ø–∞—Å–∏–±–æ! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
        "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX"
    )

@router.message(SurveyStates.WAITING_PHONE)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text
    if not re.match(r'^\+7\d{10}$', phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX")
        return

    await state.update_data(phone=phone)
    await state.set_state(SurveyStates.WAITING_BUDGET)
    await message.answer(
        "üí∞ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
        reply_markup=budget_kb
    )

@router.message(SurveyStates.WAITING_BUDGET)
async def process_budget(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await state.set_state(SurveyStates.WAITING_TIMEFRAME)
    await message.answer(
        "üïí –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
        reply_markup=timeframe_kb
    )

@router.message(SurveyStates.WAITING_TIMEFRAME)
async def process_timeframe(message: Message, state: FSMContext):
    await state.update_data(timeframe=message.text)
    await state.set_state(SurveyStates.WAITING_CURRENT_CAR)
    await message.answer(
        "üöó –ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–µ–π—á–∞—Å?\n"
        "–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å:"
    )

@router.message(SurveyStates.WAITING_CURRENT_CAR)
async def process_current_car(message: Message, state: FSMContext):
    await state.update_data(current_car=message.text)
    await state.set_state(SurveyStates.WAITING_FEATURES)
    await message.answer(
        "‚≠êÔ∏è –ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã?",
        reply_markup=features_kb
    )

@router.message(SurveyStates.WAITING_FEATURES)
async def process_features(message: Message, state: FSMContext):
    await state.update_data(features=message.text)
    await state.set_state(SurveyStates.WAITING_PURPOSE)
    await message.answer(
        "üéØ –î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
        reply_markup=purpose_kb
    )

@router.message(SurveyStates.WAITING_PURPOSE)
async def process_purpose(message: Message, state: FSMContext):
    await state.update_data(purpose=message.text)
    await state.set_state(SurveyStates.WAITING_CONCERNS)
    await message.answer(
        "‚ùì –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –ö–∏—Ç–∞—è?",
        reply_markup=concerns_kb
    )

@router.message(SurveyStates.WAITING_CONCERNS)
async def process_concerns(message: Message, state: FSMContext):
    await state.update_data(concerns=message.text)
    await state.set_state(SurveyStates.WAITING_CONTACT_TIME)
    await message.answer(
        "üìû –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –Ω–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞?",
        reply_markup=contact_time_kb
    )

@router.message(SurveyStates.WAITING_CONTACT_TIME)
async def process_contact_time(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    await state.update_data(contact_time=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–∫–∏–¥–∫–∏
    discount_code = f"ASIA{message.from_user.id}{datetime.now().strftime('%d%m')}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å!\n\n"
        f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 10 000‚ÇΩ: `{discount_code}`\n\n"
        f"üí° –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {data['contact_time']}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –æ—Ñ–∏—Å–µ!",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        f"üìä –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞!\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
        f"üïí –°—Ä–æ–∫–∏ –ø–æ–∫—É–ø–∫–∏: {data['timeframe']}\n"
        f"üöó –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {data['current_car']}\n"
        f"‚≠êÔ∏è –í–∞–∂–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {data['features']}\n"
        f"üéØ –¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {data['purpose']}\n"
        f"‚ùì –°–æ–º–Ω–µ–Ω–∏—è/–≤–æ–ø—Ä–æ—Å—ã: {data['concerns']}\n"
        f"üìû –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏: {data['contact_time']}\n"
        f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: {discount_code}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await message.bot.send_message(admin_id, admin_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await state.clear()

def register_handlers(dp: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–ø—Ä–æ—Å–∞"""
    dp.include_router(router)