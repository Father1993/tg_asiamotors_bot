from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging

from app.keyboards.base import KeyboardButtons as kb
from app.FSM.catalog import CatalogStates
from app.utils.supabase import SupabaseService
from app.keyboards import (
    get_main_keyboard,
    get_categories_keyboard,
    get_drive_types_keyboard,
    get_fuel_types_keyboard,
    get_pagination_keyboard,
    get_main_menu_keyboard
)
from app.constants.catalog import CatalogMessages as msgs, CATEGORY_MAPPING, CarInfoTemplate

logger = logging.getLogger(__name__)
router = Router()
supabase = SupabaseService()


async def send_cars_info(message: Message, cars: list, show_more_button: bool = True, offset: int = 0) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö"""
    for car in cars:
        specs = car.get('specs', {})
        equipment_info = CarInfoTemplate.EQUIPMENT.format(equipment=car['equipment']) if car.get('equipment') else ""
        
        car_info = CarInfoTemplate.CARD.format(
            brand=car.get('brand', ''),
            model=car.get('model', ''),
            year=car.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            price=car.get('price', '–ü–æ –∑–∞–ø—Ä–æ—Å—É'),
            mileage=specs.get('mileage', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            engine_volume=specs.get('engineVolume', ''),
            horse_power=specs.get('horsePower', ''),
            transmission=specs.get('transmission', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            equipment=equipment_info
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        is_favorite = await supabase.is_favorite(message.from_user.id, car['id'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        favorite_indicator = "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º\n" if is_favorite else ""
        car_info = favorite_indicator + car_info

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º" if is_favorite else "ü§ç –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                        callback_data=f"fav_{car['id']}"
                    )
                ],
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            ]
        )

        if car.get('images') and len(car['images']) > 0:
            await message.answer_photo(
                photo=car['images'][0], 
                caption=car_info,
                reply_markup=keyboard
            )
        else:
            await message.answer(
                car_info,
                reply_markup=keyboard
            )

    keyboard = get_pagination_keyboard(offset) if show_more_button else get_main_menu_keyboard()
    await message.answer(
        msgs.SHOW_MORE_PROMPT if show_more_button else msgs.NO_MORE_CARS,
        reply_markup=keyboard
    )

@router.message(F.text == kb.CATALOG)
async def show_catalog(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    await state.set_state(CatalogStates.WAITING_CATEGORY)
    await message.answer(msgs.SELECT_BODY_TYPE, reply_markup=get_categories_keyboard())

@router.message(CatalogStates.WAITING_CATEGORY)
async def process_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == kb.MAIN_MENU:
        await state.clear()
        await message.answer(msgs.RETURN_MAIN_MENU, reply_markup=get_main_keyboard())
        return

    category = message.text.lower()
    mapped_category = CATEGORY_MAPPING.get(category, category)
    await state.update_data(category=mapped_category)
    await state.set_state(CatalogStates.WAITING_DRIVE_TYPE)
    await message.answer(msgs.SELECT_DRIVE_TYPE, reply_markup=get_drive_types_keyboard())

@router.message(CatalogStates.WAITING_DRIVE_TYPE)
async def process_drive_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤–æ–¥–∞"""
    if message.text == kb.MAIN_MENU:
        await state.clear()
        await message.answer(msgs.RETURN_MAIN_MENU, reply_markup=get_main_keyboard())
        return

    await state.update_data(drive_type=message.text)
    await state.set_state(CatalogStates.WAITING_FUEL_TYPE)
    await message.answer(msgs.SELECT_FUEL_TYPE, reply_markup=get_fuel_types_keyboard())

@router.message(CatalogStates.WAITING_FUEL_TYPE)
async def process_fuel_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if message.text == kb.MAIN_MENU:
        await state.clear()
        await message.answer(msgs.RETURN_MAIN_MENU, reply_markup=get_main_keyboard())
        return

    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    filters = {
        'category': user_data['category'],
        'specs': {
            'driveType': user_data['drive_type'],
            'fuelType': message.text
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(filters=filters)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    cars = await supabase.get_cars(filters)
    
    if not cars:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
                ]]
            )
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    more_cars = await supabase.get_cars(filters, limit=1, offset=3)
    await send_cars_info(message, cars, bool(more_cars), 3)
    
    if not more_cars:
        await state.clear()

@router.callback_query(F.data.startswith("show_more_"))
async def show_more_cars(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'"""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ –∏–∑ callback_data
    current_offset = int(callback_query.data.split('_')[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    user_data = await state.get_data()
    filters = user_data.get('filters')
    
    if not filters:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    cars = await supabase.get_cars(filters, offset=current_offset)
    
    if not cars:
        await callback_query.message.answer(
            "–ë–æ–ª—å—à–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
                ]]
            )
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    more_cars = await supabase.get_cars(filters, limit=1, offset=current_offset + 3)
    await send_cars_info(callback_query.message, cars, bool(more_cars), current_offset + 3)
    
    if not more_cars:
        await state.clear()

@router.callback_query(F.data == "to_main_menu")
async def return_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())

def register_handlers(dp: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    dp.include_router(router)