from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import json

from app.keyboards.base import KeyboardButtons as kb
from app.FSM.catalog import CatalogStates
from app.utils.supabase import SupabaseService
from app.keyboards import get_main_keyboard

router = Router()
supabase = SupabaseService()

# –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_MAPPING = {
    "–∫—Ä–æ—Å—Å–æ–≤–µ—Ä": "–ö—Ä–æ—Å—Å–æ–≤–µ—Ä—ã",
    "–¥–∂–∏–ø": "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏",
    "—Å–µ–¥–∞–Ω": "–°–µ–¥–∞–Ω—ã",
    "—É–Ω–∏–≤–µ—Ä—Å–∞–ª": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—ã",
    "–º–∏–Ω–∏–≤–µ–Ω": "–ú–∏–Ω–∏–≤—ç–Ω—ã"
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö—Ä–æ—Å—Å–æ–≤–µ—Ä"), KeyboardButton(text="–î–∂–∏–ø")],
        [KeyboardButton(text="–°–µ–¥–∞–Ω"), KeyboardButton(text="–£–Ω–∏–≤–µ—Ä—Å–∞–ª")],
        [KeyboardButton(text="–ú–∏–Ω–∏–≤–µ–Ω")],
        [KeyboardButton(text=kb.MAIN_MENU)]
    ],
    resize_keyboard=True
)

drive_types_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–ª–Ω—ã–π")],
        [KeyboardButton(text="–ü–µ—Ä–µ–¥–Ω–∏–π")],
        [KeyboardButton(text="–ó–∞–¥–Ω–∏–π")],
        [KeyboardButton(text=kb.MAIN_MENU)]
    ],
    resize_keyboard=True
)

fuel_types_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–µ–Ω–∑–∏–Ω"), KeyboardButton(text="–î–∏–∑–µ–ª—å")],
        [KeyboardButton(text="–ì–∏–±—Ä–∏–¥"), KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ")],
        [KeyboardButton(text=kb.MAIN_MENU)]
    ],
    resize_keyboard=True
)

async def send_cars_info(message: Message, cars: list, show_more_button: bool = True, offset: int = 0):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö"""
    for car in cars:
        specs = car.get('specs', {})
        car_info = (
            f"üèÅ {car.get('brand', '')} {car.get('model', '')}\n"
            f"üìÖ –ì–æ–¥: {car.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üí∞ –¶–µ–Ω–∞: {car.get('price', '–ü–æ –∑–∞–ø—Ä–æ—Å—É')}$\n"
            f"üöò –ü—Ä–æ–±–µ–≥: {specs.get('mileage', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–º\n"
            f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {specs.get('engineVolume', '')} –ª. ({specs.get('horsePower', '')} –ª.—Å.)\n"
            f"üîß –ö–ü–ü: {specs.get('transmission', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        )
        if car.get('equipment'):
            car_info += f"üõ† –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è: {car['equipment']}\n"

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é
        if car.get('images') and len(car['images']) > 0:
            await message.answer_photo(
                photo=car['images'][0],
                caption=car_info
            )
        else:
            await message.answer(car_info)

    if show_more_button:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data=f"show_more_{offset}"),
                    InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
                ]
            ]
        )
        await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π?", reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
            ]
        )
        await message.answer("–≠—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏", reply_markup=keyboard)

@router.message(F.text == kb.CATALOG)
async def show_catalog(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    await state.set_state(CatalogStates.WAITING_CATEGORY)
    await message.answer(
        "üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–∑–æ–≤–∞:",
        reply_markup=categories_kb
    )

@router.message(CatalogStates.WAITING_CATEGORY)
async def process_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == kb.MAIN_MENU:
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())
        return

    category = message.text.lower()
    mapped_category = CATEGORY_MAPPING.get(category, category)
    await state.update_data(category=mapped_category)
    await state.set_state(CatalogStates.WAITING_DRIVE_TYPE)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞:", reply_markup=drive_types_kb)

@router.message(CatalogStates.WAITING_DRIVE_TYPE)
async def process_drive_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤–æ–¥–∞"""
    if message.text == kb.MAIN_MENU:
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())
        return

    await state.update_data(drive_type=message.text)
    await state.set_state(CatalogStates.WAITING_FUEL_TYPE)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=fuel_types_kb)

@router.message(CatalogStates.WAITING_FUEL_TYPE)
async def process_fuel_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞ –∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if message.text == kb.MAIN_MENU:
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())
        return

    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    filters = {
        'category': user_data['category'],
        'specs': {
            'driveType': user_data['drive_type'],
            'fuelType': message.text
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(filters=filters)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    cars = await supabase.get_cars(filters)
    
    if not cars:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
                ]]
            )
        )
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    more_cars = await supabase.get_cars(filters, limit=1, offset=3)
    await send_cars_info(message, cars, bool(more_cars), 3)
    
    if not more_cars:
        await state.clear()

@router.callback_query(F.data.startswith("show_more_"))
async def show_more_cars(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ'"""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ –∏–∑ callback_data
    current_offset = int(callback_query.data.split('_')[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    user_data = await state.get_data()
    filters = user_data.get('filters')
    
    if not filters:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    cars = await supabase.get_cars(filters, offset=current_offset)
    
    if not cars:
        await callback_query.message.answer(
            "–ë–æ–ª—å—à–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[
                    InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")
                ]]
            )
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    more_cars = await supabase.get_cars(filters, limit=1, offset=current_offset + 3)
    await send_cars_info(callback_query.message, cars, bool(more_cars), current_offset + 3)
    
    if not more_cars:
        await state.clear()

@router.callback_query(F.data == "to_main_menu")
async def return_to_main_menu(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.answer()
    await state.clear()
    await callback_query.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())

def register_handlers(dp: Router) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    dp.include_router(router)