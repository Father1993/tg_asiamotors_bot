from typing import List, Dict, Any
from app.constants.car_selection import SelectionOptions

class CarSelector:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    
    @staticmethod
    def get_car_recommendations(user_data: Dict[str, Any]) -> List[str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        
        Args:
            user_data: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        """
        car_scores = {}
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–ª–æ–≤–∞—Ä—è–º –æ–ø—Ü–∏–π
        category_mapping = {
            'lifestyle': SelectionOptions.LIFESTYLES,
            'budget': SelectionOptions.BUDGETS,
            'passengers': SelectionOptions.PASSENGERS,
            'usage': SelectionOptions.USAGE,
            'priorities': SelectionOptions.PRIORITIES
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        for category, choice in user_data.items():
            if category in category_mapping:
                options = category_mapping[category]
                if choice in options:
                    for car in options[choice]:
                        car_scores[car] = car_scores.get(car, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        sorted_cars = sorted(car_scores.items(), key=lambda x: x[1], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        return [car[0] for car in sorted_cars[:3]]

    @staticmethod
    def format_recommendations(cars: List[str]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        Args:
            cars: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        recommendations_text = ""
        emojis = ["‚ú®", "üåü", "‚≠êÔ∏è"]
        
        for i, (car, emoji) in enumerate(zip(cars, emojis), 1):
            recommendations_text += f"{i}. {emoji} {car}\n"
            
        return recommendations_text