import logging
import random
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    InlineQueryHandler
)
from dotenv import load_dotenv
import os
import json
from config import (
    TOKEN, 
    MANAGER_ID, 
    MANAGER_USERNAME, 
    logger,
    WAITING_QUESTION,
    SURVEY_BUDGET,
    WAITING_QUESTION,
    SURVEY_BUDGET,
    SURVEY_CAR_TYPE,
    SURVEY_USAGE,
    SURVEY_CONCERNS,
    SURVEY_FEATURES,
    SURVEY_TIMELINE,
    SURVEY_TRADE_IN,
    SURVEY_CONTACT
)
from data.catalog import get_filtered_cars, cars_data, categories, price_ranges, countries
from data import faq_data
from utils.keyboards import (
    get_main_menu_keyboard,
    get_catalog_countries_keyboard,
    get_car_selection_keyboard,
    get_body_type_keyboard,
    get_car_actions_keyboard,
    get_survey_start_keyboard,
    get_survey_budget_keyboard,
    get_return_menu_keyboard,
    get_navigation_keyboard
)

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
survey_responses = {}
# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
favorites = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
notifications_subscribers = set()

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
calculator_data = {
    'additional_options': {
        'winter': {'name': '‚ùÑÔ∏è –ó–∏–º–Ω–∏–π –ø–∞–∫–µ—Ç', 'price': 150000},
        'security': {'name': 'üîê –ü–∞–∫–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 'price': 200000},
        'multimedia': {'name': 'üéµ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –ø–∞–∫–µ—Ç', 'price': 180000},
        'comfort': {'name': 'üí∫ –ü–∞–∫–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–∞', 'price': 250000}
    },
    'services': {
        'insurance': {'name': 'üìã –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ö–ê–°–ö–û', 'price': 120000},
        'registration': {'name': 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ', 'price': 35000},
        'delivery': {'name': 'üöõ –î–æ—Å—Ç–∞–≤–∫–∞', 'price': 150000}
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    reply_markup = get_main_menu_keyboard()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –ö–∏—Ç–∞—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup
    )

async def car_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    reply_markup = get_car_selection_keyboard()
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç? üí∞",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç? üí∞",
            reply_markup=reply_markup
        )

async def select_body_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞"""
    query = update.callback_query
    budget = query.data.split('_')[1]
    user_states[query.from_user.id] = {'budget': budget}
    
    reply_markup = get_body_type_keyboard()
    
    await query.answer()
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–∑–æ–≤–∞: üöó",
        reply_markup=reply_markup
    )

async def show_cars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (—Ç–æ–ª—å–∫–æ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö)"""
    query = update.callback_query
    body_type, budget = query.data.split('_')[1:]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    filtered_cars = get_filtered_cars(price_range=budget, category=body_type)
    
    if not filtered_cars:
        await query.answer()
        await query.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º üòî"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    selected_cars = random.sample(filtered_cars, min(3, len(filtered_cars)))
    
    await query.answer()
    await query.message.reply_text(
        f"–ù–∞—à–µ–ª –¥–ª—è –≤–∞—Å {len(selected_cars)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ üöó"
    )
    
    for car in selected_cars:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        message = (
            f"üöò {car['brand']} {car['model']} {car['year']}\n"
            f"üí∞ {car['price']:,} ‚ÇΩ\n"
            f"üõ£ –ü—Ä–æ–±–µ–≥: {car['specs']['mileage']} –∫–º\n"
            f"üîß –î–≤–∏–≥–∞—Ç–µ–ª—å: {car['specs']['engine_volume']}–ª, {car['specs']['fuel_type']}\n"
            f"‚ö°Ô∏è –ú–æ—â–Ω–æ—Å—Ç—å: {car['specs']['horse_power']} –ª.—Å.\n"
            f"üîÑ –ö–ü–ü: {car['specs']['transmission']}\n"
            f"üöô –ü—Ä–∏–≤–æ–¥: {car['specs']['drive_type']}\n"
        )
        
        if 'features' in car['specs']:
            message += "‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: " + ", ".join(car['specs']['features']) + "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        keyboard = [
            [InlineKeyboardButton(
                f"‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å {car['brand']} {car['model']} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"favorite_{car['id']}"
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        await query.message.reply_text(message, reply_markup=reply_markup)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        if car['images']:
            media_group = []
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ 5 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            for image_path in car['images'][:5]:
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–µ–±-–ø—É—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                    local_path = f"data{image_path}"
                    media_group.append(InputMediaPhoto(media=open(local_path, 'rb')))
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
                    continue
            
            if media_group:
                try:
                    await query.message.reply_media_group(media=media_group)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
    
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        if len(filtered_cars) > 3:
            keyboard.append([
                InlineKeyboardButton(
                    "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã",
                    callback_data=f"body_{body_type}_{budget}"
                )
            ])
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([
            InlineKeyboardButton(
                "¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                callback_data='start'
            )
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É:",
        reply_markup=reply_markup
    )
    
    return WAITING_QUESTION

async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user = update.message.from_user
    
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await return_to_main_menu(update, context)
        return ConversationHandler.END
    
    if update.message.contact:
        phone = update.message.contact.phone_number
        context.user_data['phone'] = phone
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_QUESTION
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
        )
        return WAITING_PHONE
    
async def process_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    user = update.message.from_user
    question = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message = (
        f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚ùóÔ∏è\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name or ''}\n"
        f"üÜî ID: {user.id}\n"
        f"üí¨ Username: @{user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=MANAGER_ID,
            text=manager_message
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
            [InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
            [InlineKeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications')],
            [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
            [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        keyboard = [
            [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
            [InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
            [InlineKeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications')],
            [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
            [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üë® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
        [InlineKeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications')],
        [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
        [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup
    )

async def return_to_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üë® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
        [InlineKeyboardButton("‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')],
        [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='notifications')],
        [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
        [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Starting survey for user {query.from_user.id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    survey_responses[user_id] = {}
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data='survey_start')],
        [InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n"
        "–ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞—à –æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É 10000‚ÇΩ\n"
        "‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
        "‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã.",
        reply_markup=reply_markup
    )

async def survey_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ –±—é–¥–∂–µ—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Survey budget question for user {query.from_user.id}")
    
    keyboard = [
        [InlineKeyboardButton("–î–æ 1.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_1.5')],
        [InlineKeyboardButton("1.5 - 2.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_2.5')],
        [InlineKeyboardButton("2.5 - 3.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_3.5')],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 3.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_more')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "1Ô∏è‚É£ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?\n\n"
        "üí° –í–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É",
        reply_markup=reply_markup
    )
    return SURVEY_BUDGET

async def survey_car_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ —Ç–∏–ø–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ –±—é–¥–∂–µ—Ç–µ
    user_id = query.from_user.id
    survey_responses[user_id]['budget'] = query.data.split('_')[-1]
    
    keyboard = [
        [InlineKeyboardButton("üöó –ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='survey_type_new')],
        [InlineKeyboardButton("üöô –° –ø—Ä–æ–±–µ–≥–æ–º –¥–æ 1 –≥–æ–¥–∞", callback_data='survey_type_1year')],
        [InlineKeyboardButton("üöò –° –ø—Ä–æ–±–µ–≥–æ–º –¥–æ 3 –ª–µ—Ç", callback_data='survey_type_3years')],
        [InlineKeyboardButton("üîÑ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data='survey_type_all')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "2Ô∏è‚É£ –ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=reply_markup
    )
    return SURVEY_CAR_TYPE

async def survey_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ —Ü–µ–ª—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    survey_responses[user_id]['car_type'] = query.data.split('_')[-1]
    
    keyboard = [
        [InlineKeyboardButton("üè¢ –î–ª—è —Ä–∞–±–æ—Ç—ã", callback_data='survey_usage_work')],
        [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º—å–∏", callback_data='survey_usage_family')],
        [InlineKeyboardButton("üèÉ –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞", callback_data='survey_usage_active')],
        [InlineKeyboardButton("üåÜ –î–ª—è –≥–æ—Ä–æ–¥–∞", callback_data='survey_usage_city')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "3Ô∏è‚É£ –ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
        reply_markup=reply_markup
    )
    return SURVEY_USAGE

async def survey_concerns(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ —Å–æ–º–Ω–µ–Ω–∏—è—Ö"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    survey_responses[user_id]['usage'] = query.data.split('_')[-1]
    
    keyboard = [
        [InlineKeyboardButton("üîß –°–µ—Ä–≤–∏—Å –∏ –∑–∞–ø—á–∞—Å—Ç–∏", callback_data='survey_concerns_service')],
        [InlineKeyboardButton("üí∞ –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='survey_concerns_value')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å", callback_data='survey_concerns_reliability')],
        [InlineKeyboardButton("ü§î –ù–µ—Ç —Å–æ–º–Ω–µ–Ω–∏–π", callback_data='survey_concerns_none')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "4Ô∏è‚É£ –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–µ —Å–æ–º–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
        reply_markup=reply_markup
    )
    return SURVEY_CONCERNS

async def generate_promo_code(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    import hashlib
    import time
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–∏
    hash_string = f"{user_id}{time.time()}".encode()
    hash_object = hashlib.md5(hash_string)
    return f"ASIASTART{hash_object.hexdigest()[:6].upper()}"

async def finish_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    survey_responses[user_id]['concerns'] = query.data.split('_')[-1]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = await generate_promo_code(user_id)
    survey_responses[user_id]['promo_code'] = promo_code
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_message = (
        f"üìä –ù–æ–≤—ã–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {query.from_user.first_name} {query.from_user.last_name or ''}\n"
        f"üÜî ID: {user_id}\n"
        f"üí¨ Username: @{query.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {survey_responses[user_id]['budget']}\n"
        f"üöó –¢–∏–ø –∞–≤—Ç–æ: {survey_responses[user_id]['car_type']}\n"
        f"üí¨ –¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {survey_responses[user_id]['usage']}\n"
        f"‚ùì –°–æ–º–Ω–µ–Ω–∏—è: {survey_responses[user_id]['concerns']}\n"
        f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=MANAGER_ID,
            text=manager_message
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')],
        [InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É!\n\n"
        f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: `{promo_code}`\n\n"
        f"üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø—Ä–µ–¥—ä—è–≤–∏—Ç–µ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
        f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 14 –¥–Ω–µ–π\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–¥–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ConversationHandler.END

async def inline_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    query = update.inline_query.query.lower()
    results = []
    
    # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    for budget_category in catalog.values():
        for body_type in budget_category.values():
            for car in body_type:
                if query in car['name'].lower():
                    results.append(
                        InlineQueryResultArticle(
                            id=f"{car['name']}_{car['year']}",
                            title=f"{car['name']} ({car['year']})",
                            description=f"–¶–µ–Ω–∞: {car['price']:,} ‚ÇΩ",
                            input_message_content=InputTextMessageContent(
                                message_text=f"üöó {car['name']} {car['year']}\n"
                                           f"üí∞ –¶–µ–Ω–∞: {car['price']:,} ‚ÇΩ\n"
                                           f"–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                            )
                        )
                    )
    
    await update.inline_query.answer(results[:50])

async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ FAQ —Ä–∞–∑–¥–µ–ª–∞"""
    keyboard = []
    for key, data in faq_data.items():
        keyboard.append([InlineKeyboardButton(data['question'], callback_data=f'faq_{key}')])
    keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
            reply_markup=reply_markup
        )

async def show_faq_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å FAQ"""
    query = update.callback_query
    faq_key = query.data.split('_')[1]
    
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ FAQ", callback_data='faq')],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.answer()
    await query.message.reply_text(
        f"‚ùì {faq_data[faq_key]['question']}\n\n"
        f"üìù {faq_data[faq_key]['answer']}",
        reply_markup=reply_markup
    )

async def add_to_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    query = update.callback_query
    catalog = query.data.split('_')[1:]  # favorite_budget_bodytype_index
    user_id = query.from_user.id
    
    if user_id not in favorites:
        favorites[user_id] = []
    
    budget = catalog[0]
    body_type = catalog[1]
    car_index = int(catalog[2])
    
    car = catalog[budget][body_type][car_index]
    
    if car not in favorites[user_id]:
        favorites[user_id].append(car)
        await query.answer("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠êÔ∏è")
    else:
        await query.answer("–≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")

async def show_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        message = query.message
    else:
        user_id = update.message.from_user.id
        message = update.message
    
    if user_id not in favorites or not favorites[user_id]:
        keyboard = [[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π! ‚≠êÔ∏è\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ç–∞–ª–æ–≥–∞.",
            reply_markup=reply_markup
        )
        return
    
    text = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n\n"
    keyboard = []
    
    for i, car in enumerate(favorites[user_id]):
        text += f"üöó {car['name']} {car['year']}\nüí∞ {car['price']:,} ‚ÇΩ\n\n"
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –£–¥–∞–ª–∏—Ç—å {car['name']}", 
            callback_data=f'remove_favorite_{i}'
        )])
    
    keyboard.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(text, reply_markup=reply_markup)

async def remove_from_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    query = update.callback_query
    user_id = query.from_user.id
    index = int(query.data.split('_')[2])
    
    if user_id in favorites and 0 <= index < len(favorites[user_id]):
        removed_car = favorites[user_id].pop(index)
        await query.answer(f"{removed_car['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!")
        await show_favorites(update, context)
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id in notifications_subscribers:
        notifications_subscribers.remove(user_id)
        await query.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! üîï")
    else:
        notifications_subscribers.add(user_id)
        await query.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! üîî")
    
    await show_notification_settings(update, context)

async def show_notification_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        message = query.message
    else:
        user_id = update.message.from_user.id
        message = update.message
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã üîî" if user_id in notifications_subscribers else "–≤—ã–∫–ª—é—á–µ–Ω—ã üîï"
    
    keyboard = [
        [InlineKeyboardButton(
            "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï" if user_id in notifications_subscribers else "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî",
            callback_data='toggle_notifications'
        )],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
        f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö\n"
        f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω",
        reply_markup=reply_markup
    )

async def notify_about_new_car(context: ContextTypes.DEFAULT_TYPE, car_info: dict):
    """—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    message = (
        f"üÜï –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!\n\n"
        f"üöó {car_info['name']} {car_info['year']}\n"
        f"üí∞ –¶–µ–Ω–∞: {car_info['price']:,} ‚ÇΩ\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
    )
    
    for user_id in notifications_subscribers:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def start_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    context.user_data.clear()
    context.user_data['calculator'] = {
        'base_price': 0,
        'options': set(),
        'services': set(),
        'total': 0
    }
    
    keyboard = [
        [InlineKeyboardButton("–î–æ 1.5 –º–ª–Ω ‚ÇΩ", callback_data='calc_1500000')],
        [InlineKeyboardButton("1.5 - 2.5 –º–ª–Ω ‚ÇΩ", callback_data='calc_2500000')],
        [InlineKeyboardButton("2.5 - 3.5 –º–ª–Ω ‚ÇΩ", callback_data='calc_3500000')],
        [InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
        reply_markup=reply_markup
    )

async def select_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('calc_'):
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        base_price = int(query.data.split('_')[1])
        context.user_data['calculator']['base_price'] = base_price
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
    keyboard = []
    calc_data = context.user_data['calculator']
    
    for option_id, option in calculator_data['additional_options'].items():
        checkbox = '‚úÖ' if option_id in calc_data['options'] else '‚¨úÔ∏è'
        keyboard.append([InlineKeyboardButton(
            f"{checkbox} {option['name']} (+{option['price']:,} ‚ÇΩ)",
            callback_data=f'option_{option_id}'
        )])
    
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data='calc_services')])
    keyboard.append([InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    total = calc_data['base_price']
    for opt in calc_data['options']:
        total += calculator_data['additional_options'][opt]['price']
    
    context.user_data['calculator']['total'] = total
    
    await query.message.edit_text(
        "üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:\n\n"
        f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calc_data['base_price']:,} ‚ÇΩ\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–π: {(total - calc_data['base_price']):,} ‚ÇΩ\n"
        f"–ò—Ç–æ–≥–æ: {total:,} ‚ÇΩ",
        reply_markup=reply_markup
    )

async def select_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥"""
    query = update.callback_query
    await query.answer()
    
    calc_data = context.user_data['calculator']
    
    if query.data.startswith('option_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏
        option_id = query.data.split('_')[1]
        if option_id in calc_data['options']:
            calc_data['options'].remove(option_id)
        else:
            calc_data['options'].add(option_id)
        return await select_options(update, context)
    
    if query.data.startswith('service_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        service_id = query.data.split('_')[1]
        if service_id in calc_data['services']:
            calc_data['services'].remove(service_id)
        else:
            calc_data['services'].add(service_id)
    
    # –§–æ—Ä—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
    keyboard = []
    
    for service_id, service in calculator_data['services'].items():
        checkbox = '‚úÖ' if service_id in calc_data['services'] else '‚¨úÔ∏è'
        keyboard.append([InlineKeyboardButton(
            f"{checkbox} {service['name']} (+{service['price']:,} ‚ÇΩ)",
            callback_data=f'service_{service_id}'
        )])
    
    keyboard.append([InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥", callback_data='calc_result')])
    keyboard.append([InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø—Ü–∏—è–º", callback_data='calc_back_options')])
    keyboard.append([InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    total = calc_data['base_price']
    options_cost = sum(calculator_data['additional_options'][opt]['price'] for opt in calc_data['options'])
    services_cost = sum(calculator_data['services'][srv]['price'] for srv in calc_data['services'])
    total += options_cost + services_cost
    
    context.user_data['calculator']['total'] = total
    
    await query.message.edit_text(
        "üõé –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\n"
        f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calc_data['base_price']:,} ‚ÇΩ\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–π: {options_cost:,} ‚ÇΩ\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥: {services_cost:,} ‚ÇΩ\n"
        f"–ò—Ç–æ–≥–æ: {total:,} ‚ÇΩ",
        reply_markup=reply_markup
    )

async def show_calculator_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    calc_data = context.user_data['calculator']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    options_text = ""
    if calc_data['options']:
        options_text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:\n" + "\n".join(
            f"‚Ä¢ {calculator_data['additional_options'][opt]['name']}: {calculator_data['additional_options'][opt]['price']:,} ‚ÇΩ"
            for opt in calc_data['options']
        ) + "\n\n"
    
    services_text = ""
    if calc_data['services']:
        services_text = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n" + "\n".join(
            f"‚Ä¢ {calculator_data['services'][srv]['name']}: {calculator_data['services'][srv]['price']:,} ‚ÇΩ"
            for srv in calc_data['services']
        ) + "\n\n"
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    options_cost = sum(calculator_data['additional_options'][opt]['price'] for opt in calc_data['options'])
    services_cost = sum(calculator_data['services'][srv]['price'] for srv in calc_data['services'])
    total = calc_data['base_price'] + options_cost + services_cost
    
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data='calculator')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')],
        [InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_link = f'<a href="https://t.me/{MANAGER_USERNAME}">–º–µ–Ω–µ–¥–∂–µ—Ä–∞</a>' if MANAGER_USERNAME else '–º–µ–Ω–µ–¥–∂–µ—Ä–∞'
    
    await query.message.edit_text(
        "üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n"
        f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calc_data['base_price']:,} ‚ÇΩ\n\n"
        f"{options_text}"
        f"{services_text}"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,} ‚ÇΩ\n\n"
        f"üí° –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–∏–ª—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∞–∫—Ü–∏–π –∏ —Å–∫–∏–¥–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É {manager_link}.",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def send_car_photos(update: Update, context: ContextTypes.DEFAULT_TYPE, car_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    if 'images' in car_data:
        media_group = []
        for image_path in car_data['images'][:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ñ–æ—Ç–æ
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º–∞—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π
            local_path = f"static{image_path}"
            try:
                media_group.append(InputMediaPhoto(media=open(local_path, 'rb')))
            except FileNotFoundError:
                continue
        
        if media_group:
            await update.message.reply_media_group(media=media_group)
        else:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    contact_manager_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(contact_manager, pattern='^contact_manager$')],
        states={
            WAITING_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_question)
            ]
        },
        fallbacks=[
            CommandHandler('start', start),
            CallbackQueryHandler(return_to_main_menu_callback, pattern='^start$')
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–∞
    survey_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_survey, pattern='^survey$')],
        states={
            SURVEY_BUDGET: [
                CallbackQueryHandler(survey_budget, pattern='^survey_start$'),
                CallbackQueryHandler(survey_car_type, pattern='^survey_budget_')
            ],
            SURVEY_CAR_TYPE: [CallbackQueryHandler(survey_usage, pattern='^survey_type_')],
            SURVEY_USAGE: [CallbackQueryHandler(survey_concerns, pattern='^survey_usage_')],
            SURVEY_CONCERNS: [CallbackQueryHandler(finish_survey, pattern='^survey_concerns_')]
        },
        fallbacks=[
            CommandHandler('start', start),
            CallbackQueryHandler(return_to_main_menu_callback, pattern='^start$'),
            CallbackQueryHandler(start_survey, pattern='^survey$')
        ],
        allow_reentry=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(car_selection, pattern='^car_selection$'))
    application.add_handler(CallbackQueryHandler(select_body_type, pattern='^budget_'))
    application.add_handler(CallbackQueryHandler(show_cars, pattern='^body_'))
    application.add_handler(contact_manager_handler)
    application.add_handler(survey_handler)
    application.add_handler(CallbackQueryHandler(return_to_main_menu_callback, pattern='^start$'))
    application.add_handler(InlineQueryHandler(inline_search))
    application.add_handler(CallbackQueryHandler(show_faq, pattern='^faq$'))
    application.add_handler(CallbackQueryHandler(show_faq_answer, pattern='^faq_.*$'))
    application.add_handler(CallbackQueryHandler(show_favorites, pattern='^favorites$'))
    application.add_handler(CallbackQueryHandler(add_to_favorites, pattern='^favorite_.*$'))
    application.add_handler(CallbackQueryHandler(remove_from_favorites, pattern='^remove_favorite_.*$'))
    application.add_handler(CallbackQueryHandler(show_notification_settings, pattern='^notifications$'))
    application.add_handler(CallbackQueryHandler(toggle_notifications, pattern='^toggle_notifications$'))
    application.add_handler(CallbackQueryHandler(start_calculator, pattern='^calculator$'))
    application.add_handler(CallbackQueryHandler(select_options, pattern='^calc_[0-9]+$'))
    application.add_handler(CallbackQueryHandler(select_options, pattern='^calc_back_options$'))
    application.add_handler(CallbackQueryHandler(select_services, pattern='^calc_services$'))
    application.add_handler(CallbackQueryHandler(select_services, pattern='^option_'))
    application.add_handler(CallbackQueryHandler(select_services, pattern='^service_'))
    application.add_handler(CallbackQueryHandler(show_calculator_result, pattern='^calc_result$'))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()