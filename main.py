import logging
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from dotenv import load_dotenv
import os
import json
import pandas as pd

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_ID = os.getenv('TELEGRAM_MANAGER_ID')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    WAITING_QUESTION,
    SURVEY_BUDGET,
    SURVEY_CAR_TYPE,
    SURVEY_USAGE,
    SURVEY_CONCERNS,
    SURVEY_FEATURES,
    SURVEY_TIMELINE,
    SURVEY_TRADE_IN,
    SURVEY_CONTACT
) = range(9)

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
survey_responses = {}
# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
cars_data = {
    'economy': {
        'sedan': [
            {'name': 'Geely Emgrand', 'price': 1450000, 'year': 2023},
            {'name': 'Chery Arrizo', 'price': 1350000, 'year': 2023}
        ],
        'crossover': [
            {'name': 'Haval Jolion', 'price': 1850000, 'year': 2023},
            {'name': 'Chery Tiggo 4', 'price': 1750000, 'year': 2023}
        ]
    },
    'medium': {
        'sedan': [
            {'name': 'GAC Empow', 'price': 2450000, 'year': 2023},
            {'name': 'Chery Arrizo 8', 'price': 2350000, 'year': 2023}
        ],
        'crossover': [
            {'name': 'Haval F7', 'price': 2850000, 'year': 2023},
            {'name': 'Geely Atlas Pro', 'price': 2650000, 'year': 2023}
        ]
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
        [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –ö–∏—Ç–∞—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup
    )

async def car_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    keyboard = [
        [
            InlineKeyboardButton("–î–æ 1.5 –º–ª–Ω", callback_data='budget_economy'),
            InlineKeyboardButton("1.5-3 –º–ª–Ω", callback_data='budget_medium'),
            InlineKeyboardButton("–ë–æ–ª—å—à–µ 3 –º–ª–Ω", callback_data='budget_premium')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç? üí∞",
        reply_markup=reply_markup
    )

async def select_body_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞"""
    query = update.callback_query
    budget = query.data.split('_')[1]
    user_states[query.from_user.id] = {'budget': budget}
    
    keyboard = [
        [
            InlineKeyboardButton("–°–µ–¥–∞–Ω", callback_data=f'body_sedan_{budget}'),
            InlineKeyboardButton("–ö—Ä–æ—Å—Å–æ–≤–µ—Ä", callback_data=f'body_crossover_{budget}')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.answer()
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–∑–æ–≤–∞: üöó",
        reply_markup=reply_markup
    )

async def show_cars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    query = update.callback_query
    body_type, budget = query.data.split('_')[1:]
    
    cars = cars_data[budget][body_type]
    
    message = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª –¥–ª—è –≤–∞—Å:\n\n"
    for car in cars:
        message += f"üöò {car['name']} {car['year']}\nüí∞ {car['price']:,} ‚ÇΩ\n\n"
    
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='calculate_full_price')],
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.answer()
    await query.message.reply_text(message, reply_markup=reply_markup)

async def contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É:",
        reply_markup=reply_markup
    )
    
    return WAITING_QUESTION

async def process_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user = update.message.from_user
    
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        await return_to_main_menu(update, context)
        return ConversationHandler.END
    
    if update.message.contact:
        phone = update.message.contact.phone_number
        context.user_data['phone'] = phone
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_QUESTION
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
        )
        return WAITING_PHONE
    
async def process_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    user = update.message.from_user
    question = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message = (
        f"‚ùóÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚ùóÔ∏è\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name} {user.last_name or ''}\n"
        f"üÜî ID: {user.id}\n"
        f"üí¨ Username: @{user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å:\n{question}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=MANAGER_ID,
            text=manager_message
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
            [InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
            [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        keyboard = [
            [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
            [InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
            [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
            [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
        [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
        [InlineKeyboardButton("üë®‚Äçüíº –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data='contact_manager')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup
    )

async def return_to_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    query = update.callback_query
    await query.answer()  # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query
    
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data='calculator')],
        [InlineKeyboardButton("üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='survey')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Starting survey for user {query.from_user.id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    survey_responses[user_id] = {}
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data='survey_start')],
        [InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n"
        "–ü—Ä–æ–π–¥–∏—Ç–µ –Ω–∞—à –æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É 10000‚ÇΩ\n"
        "‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
        "‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã.",
        reply_markup=reply_markup
    )
    return SURVEY_BUDGET

async def survey_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ –±—é–¥–∂–µ—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    logger.info(f"Survey budget question for user {query.from_user.id}")
    
    keyboard = [
        [InlineKeyboardButton("–î–æ 1.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_1.5')],
        [InlineKeyboardButton("1.5 - 2.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_2.5')],
        [InlineKeyboardButton("2.5 - 3.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_3.5')],
        [InlineKeyboardButton("–ë–æ–ª–µ–µ 3.5 –º–ª–Ω ‚ÇΩ", callback_data='survey_budget_more')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "1Ô∏è‚É£ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?\n\n"
        "üí° –í–∫–ª—é—á–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É",
        reply_markup=reply_markup
    )
    return SURVEY_BUDGET

async def survey_car_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ —Ç–∏–ø–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ –±—é–¥–∂–µ—Ç–µ
    user_id = query.from_user.id
    survey_responses[user_id]['budget'] = query.data.split('_')[-1]
    
    keyboard = [
        [InlineKeyboardButton("üöó –ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='survey_type_new')],
        [InlineKeyboardButton("üöô –° –ø—Ä–æ–±–µ–≥–æ–º –¥–æ 1 –≥–æ–¥–∞", callback_data='survey_type_1year')],
        [InlineKeyboardButton("üöò –° –ø—Ä–æ–±–µ–≥–æ–º –¥–æ 3 –ª–µ—Ç", callback_data='survey_type_3years')],
        [InlineKeyboardButton("üîÑ –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data='survey_type_all')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "2Ô∏è‚É£ –ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=reply_markup
    )
    return SURVEY_CAR_TYPE

async def survey_usage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ —Ü–µ–ª—è—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    survey_responses[user_id]['car_type'] = query.data.split('_')[-1]
    
    keyboard = [
        [InlineKeyboardButton("üè¢ –î–ª—è —Ä–∞–±–æ—Ç—ã", callback_data='survey_usage_work')],
        [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –î–ª—è —Å–µ–º—å–∏", callback_data='survey_usage_family')],
        [InlineKeyboardButton("üèÉ –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞", callback_data='survey_usage_active')],
        [InlineKeyboardButton("üåÜ –î–ª—è –≥–æ—Ä–æ–¥–∞", callback_data='survey_usage_city')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "3Ô∏è‚É£ –ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
        reply_markup=reply_markup
    )
    return SURVEY_USAGE

async def survey_concerns(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–ø—Ä–æ—Å –æ —Å–æ–º–Ω–µ–Ω–∏—è—Ö"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    survey_responses[user_id]['usage'] = query.data.split('_')[-1]
    
    keyboard = [
        [InlineKeyboardButton("üîß –°–µ—Ä–≤–∏—Å –∏ –∑–∞–ø—á–∞—Å—Ç–∏", callback_data='survey_concerns_service')],
        [InlineKeyboardButton("üí∞ –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='survey_concerns_value')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å", callback_data='survey_concerns_reliability')],
        [InlineKeyboardButton("ü§î –ù–µ—Ç —Å–æ–º–Ω–µ–Ω–∏–π", callback_data='survey_concerns_none')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "4Ô∏è‚É£ –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–µ —Å–æ–º–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
        reply_markup=reply_markup
    )
    return SURVEY_CONCERNS

async def generate_promo_code(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    import hashlib
    import time
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Ä–µ–º–µ–Ω–∏
    hash_string = f"{user_id}{time.time()}".encode()
    hash_object = hashlib.md5(hash_string)
    return f"ASIASTART{hash_object.hexdigest()[:6].upper()}"

async def finish_survey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    survey_responses[user_id]['concerns'] = query.data.split('_')[-1]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = await generate_promo_code(user_id)
    survey_responses[user_id]['promo_code'] = promo_code
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_message = (
        f"üìä –ù–æ–≤—ã–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å!\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {query.from_user.first_name} {query.from_user.last_name or ''}\n"
        f"üÜî ID: {user_id}\n"
        f"üí¨ Username: @{query.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {survey_responses[user_id]['budget']}\n"
        f"üöó –¢–∏–ø –∞–≤—Ç–æ: {survey_responses[user_id]['car_type']}\n"
        f"üéØ –¶–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {survey_responses[user_id]['usage']}\n"
        f"‚ùì –°–æ–º–Ω–µ–Ω–∏—è: {survey_responses[user_id]['concerns']}\n"
        f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}"
    )
    
    try:
        await context.bot.send_message(
            chat_id=MANAGER_ID,
            text=manager_message
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data='car_selection')],
        [InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data='contact_manager')],
        [InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É!\n\n"
        f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: `{promo_code}`\n\n"
        f"üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø—Ä–µ–¥—ä—è–≤–∏—Ç–µ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
        f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 14 –¥–Ω–µ–π\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    contact_manager_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(contact_manager, pattern='^contact_manager$')],
        states={
            WAITING_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_question)
            ]
        },
        fallbacks=[
            CommandHandler('start', start),
            CallbackQueryHandler(start, pattern='^start$')
        ]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ä–æ—Å–∞
    survey_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_survey, pattern='^survey$')],
        states={
            SURVEY_BUDGET: [
                CallbackQueryHandler(survey_budget, pattern='^survey_start$'),
                CallbackQueryHandler(survey_car_type, pattern='^survey_budget_')
            ],
            SURVEY_CAR_TYPE: [CallbackQueryHandler(survey_usage, pattern='^survey_type_')],
            SURVEY_USAGE: [CallbackQueryHandler(survey_concerns, pattern='^survey_usage_')],
            SURVEY_CONCERNS: [CallbackQueryHandler(finish_survey, pattern='^survey_concerns_')]
        },
        fallbacks=[
            CommandHandler('start', start),
            CallbackQueryHandler(start, pattern='^start$')
        ]
    )
    
    application.add_handler(survey_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(car_selection, pattern='^car_selection$'))
    application.add_handler(CallbackQueryHandler(select_body_type, pattern='^budget_'))
    application.add_handler(CallbackQueryHandler(show_cars, pattern='^body_'))
    application.add_handler(contact_manager_handler)
    application.add_handler(survey_handler) 
    application.add_handler(CallbackQueryHandler(return_to_main_menu_callback, pattern='^start$'))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()